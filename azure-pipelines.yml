trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform/*
      - lambda/*
      - azure-pipelines.yml

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.6.0'
  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

stages:
  - stage: Validate
    displayName: 'Validate Terraform'
    jobs:
      - job: ValidateTerraform
        displayName: 'Validate and Format Check'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: $(workingDirectory)
              backendServiceAWS: 'AWS-ServiceConnection'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_REGION: $(AWS_REGION)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'aws'
              command: 'validate'
              workingDirectory: $(workingDirectory)

          - script: |
              terraform fmt -check -recursive
            displayName: 'Terraform Format Check'
            workingDirectory: $(workingDirectory)

  - stage: Plan
    displayName: 'Plan Infrastructure'
    dependsOn: Validate
    condition: succeeded()
    jobs:
      - job: TerraformPlan
        displayName: 'Terraform Plan'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: $(workingDirectory)
              backendServiceAWS: 'AWS-ServiceConnection'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_REGION: $(AWS_REGION)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'aws'
              command: 'plan'
              workingDirectory: $(workingDirectory)
              environmentServiceNameAWS: 'AWS-ServiceConnection'
              commandOptions: '-out=tfplan'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_REGION: $(AWS_REGION)

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Plan'
            inputs:
              targetPath: '$(workingDirectory)/tfplan'
              artifact: 'terraform-plan'
              publishLocation: 'pipeline'

  - stage: Apply
    displayName: 'Apply Infrastructure'
    dependsOn: Plan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployLambda
        displayName: 'Deploy Lambda Function'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: $(terraformVersion)

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Init'
                  inputs:
                    provider: 'aws'
                    command: 'init'
                    workingDirectory: $(workingDirectory)
                    backendServiceAWS: 'AWS-ServiceConnection'
                  env:
                    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
                    AWS_REGION: $(AWS_REGION)

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply'
                  inputs:
                    provider: 'aws'
                    command: 'apply'
                    workingDirectory: $(workingDirectory)
                    environmentServiceNameAWS: 'AWS-ServiceConnection'
                    commandOptions: '-auto-approve'
                  env:
                    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
                    AWS_REGION: $(AWS_REGION)

                - script: |
                    cd $(workingDirectory)
                    echo "Lambda Function Name:"
                    terraform output -raw lambda_function_name
                    echo ""
                    echo "Lambda Function ARN:"
                    terraform output -raw lambda_function_arn
                  displayName: 'Display Outputs'
